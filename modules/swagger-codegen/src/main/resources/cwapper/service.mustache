/*
{{{appDescription}}}
                        Please EDIT this file
*/

#include "cwapper.hpp"
#include "restful.hpp"

class service: public cwapper::restful {
public:
    service(cppcms::service &srv): restful::restful(srv) {};

{{#operations}}
    virtual {{#returnType}}{{returnType}}{{^returnSimpleType}}<{{returnBaseType}}>{{/returnSimpleType}}{{/returnType}}{{^returnType}}void{{/returnType}} restful::{{operationId}}({{#allParams}}{{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
        // Implementation goes here
    {{#bodyParams}}
        return{{#returnType}} {{paramName}}{{/returnType}};
    {{/bodyParams}}
    {{^bodyParams}}
        return{{#returnType}} {{returnType}}{{#returnSimpleType}}(){{/returnSimpleType}}{{^returnSimpleType}}<{{returnBaseType}}>(){{/returnSimpleType}}{{/returnType}};
    {{/bodyParams}}
    }
{{/operations}}

};

int main(int argc,char ** argv) {
    try {
        cppcms::service srv(argc,argv);
        srv.applications_pool().mount(cppcms::applications_factory<service>());
        srv.run();
    } catch(std::exception const &e) {
        std::cerr << e.what() << std::endl;
    }
}
